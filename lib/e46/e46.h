/** CAN message encoder/decoder: automatically generated - do not edit
  * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef E46_H
#define E46_H

/* If the contents of this file have caused breaking changes for you, you could try using
   an older version of the generator. You can specify this on the command line with
   the -n option. */
#define DBCC_GENERATOR_VERSION (3)

#include <stdint.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" { 
#endif

#ifndef PREPACK
#define PREPACK
#endif

#ifndef POSTPACK
#define POSTPACK
#endif

#ifndef DBCC_TIME_STAMP
#define DBCC_TIME_STAMP
typedef uint32_t dbcc_time_stamp_t; /* Time stamp for message; you decide on units */
#endif

#ifndef DBCC_STATUS_ENUM
#define DBCC_STATUS_ENUM
typedef enum {
	DBCC_SIG_STAT_UNINITIALIZED_E = 0, /* Message never sent/received */
	DBCC_SIG_STAT_OK_E            = 1, /* Message ok */
	DBCC_SIG_STAT_ERROR_E         = 2, /* Encode/Decode/Timestamp/Any error */
} dbcc_signal_status_e;
#endif

#define CAN_ID_ASC_1 (339) /* 0x153 */
#define CAN_ID_ABS_1 (496) /* 0x1f0 */
#define CAN_ID_STEERING_ANGLE_SENSOR (501) /* 0x1f5 */
#define CAN_ID_DME1 (790) /* 0x316 */
#define CAN_ID_DME2 (809) /* 0x329 */
#define CAN_ID_DME3 (824) /* 0x338 */
#define CAN_ID_DME4 (1349) /* 0x545 */
#define CAN_ID_INSTRUMENT_CLUSTER (1555) /* 0x613 */
#define CAN_ID_IKE (1557) /* 0x615 */

typedef PREPACK struct {
	uint16_t Speed; /* scaling 1.0, offset 9.9, units none  */
	uint8_t Tyre_Pressure_Set; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Brake_Pedal_Pressed; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x153_ASC_1_t;

typedef enum {
	CAN_0X153_ASC_1_BRAKE_PEDAL_PRESSED_NOT_PRESSED = 0,
	CAN_0X153_ASC_1_BRAKE_PEDAL_PRESSED_PRESSED = 1,
} can_0x153_ASC_1_Brake_Pedal_Pressed_e;

typedef PREPACK struct {
	uint16_t Wheel_1_Left_Front_Speed; /* scaling 0.1, offset 0.0, units none  */
	uint16_t Wheel_2_Right_Front_Speed; /* scaling 0.1, offset 0.0, units none  */
	uint16_t Wheel_3_Left_Rear_Speed; /* scaling 0.1, offset 0.0, units none  */
	uint16_t Wheel_4_Right_Rear_Speed; /* scaling 0.1, offset 0.0, units none  */
} POSTPACK can_0x1f0_ABS_1_t;

typedef PREPACK struct {
	uint16_t Steering_Angle; /* scaling 0.0, offset 0.0, units none  */
	uint16_t Steering_Angle_Velocity; /* scaling 0.0, offset 0.0, units none  */
	uint8_t Steering_Angle_Direction; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Steering_Angle_Velocity_Direction; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x1f5_Steering_Angle_Sensor_t;

typedef PREPACK struct {
	uint16_t RPM; /* scaling 0.2, offset 0.0, units none  */
	uint8_t Torque_loss_of_consumers; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Torque_after_interventions; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Torque_before_interventions; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Key; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Ignition_on_DME_ready; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Starter; /* scaling 1.0, offset 0.0, units none  */
	uint8_t AC_Clutch; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x316_DME1_t;

typedef enum {
	CAN_0X316_DME1_KEY_OFF = 0,
	CAN_0X316_DME1_KEY_ON = 1,
} can_0x316_DME1_Key_e;

typedef enum {
	CAN_0X316_DME1_IGNITION_ON_DME_READY_OFF = 0,
	CAN_0X316_DME1_IGNITION_ON_DME_READY_ON = 1,
} can_0x316_DME1_Ignition_on_DME_ready_e;

typedef enum {
	CAN_0X316_DME1_STARTER_OFF = 0,
	CAN_0X316_DME1_STARTER_ON = 1,
} can_0x316_DME1_Starter_e;

typedef enum {
	CAN_0X316_DME1_AC_CLUTCH_OFF = 0,
	CAN_0X316_DME1_AC_CLUTCH_ON = 1,
} can_0x316_DME1_AC_Clutch_e;

typedef PREPACK struct {
	uint8_t Driver_Desired_Torque; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Throttle_Position; /* scaling 1.0, offset 0.0, units %  */
	uint8_t Engine_Temp; /* scaling 0.8, offset -48.4, units deg_c  */
	uint8_t Cycling_Number; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Atmospheric_Pressure; /* scaling 2.0, offset 597.0, units mbar  */
	uint8_t Brake_Light_Switch_Error; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Clutch_Switch; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Engine_Running; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Brake_Light_Switch; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x329_DME2_t;

typedef enum {
	CAN_0X329_DME2_BRAKE_LIGHT_SWITCH_ERROR_OFF = 0,
	CAN_0X329_DME2_BRAKE_LIGHT_SWITCH_ERROR_ERROR_21__21_ = 1,
} can_0x329_DME2_Brake_Light_Switch_Error_e;

typedef enum {
	CAN_0X329_DME2_CLUTCH_SWITCH_NOT_PRESSED = 0,
	CAN_0X329_DME2_CLUTCH_SWITCH_PRESSED = 1,
} can_0x329_DME2_Clutch_Switch_e;

typedef enum {
	CAN_0X329_DME2_ENGINE_RUNNING_NOT_RUNNING = 0,
	CAN_0X329_DME2_ENGINE_RUNNING_RUNNING = 1,
} can_0x329_DME2_Engine_Running_e;

typedef enum {
	CAN_0X329_DME2_BRAKE_LIGHT_SWITCH_NOT_PRESSED = 0,
	CAN_0X329_DME2_BRAKE_LIGHT_SWITCH_PRESSED = 1,
} can_0x329_DME2_Brake_Light_Switch_e;

typedef PREPACK struct {
	uint8_t Throttle_Position; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Clutch; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Engine_Running; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Brake_Switch; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x338_DME3_t;

typedef enum {
	CAN_0X338_DME3_CLUTCH_NOT_PRESSED = 0,
	CAN_0X338_DME3_CLUTCH_PRESSED = 1,
} can_0x338_DME3_Clutch_e;

typedef enum {
	CAN_0X338_DME3_ENGINE_RUNNING_NOT_RUNNING = 0,
	CAN_0X338_DME3_ENGINE_RUNNING_RUNNING = 1,
} can_0x338_DME3_Engine_Running_e;

typedef enum {
	CAN_0X338_DME3_BRAKE_SWITCH_NOT_PRESSED = 0,
	CAN_0X338_DME3_BRAKE_SWITCH_PRESSED = 1,
} can_0x338_DME3_Brake_Switch_e;

typedef PREPACK struct {
	uint16_t Fuel_Consumption; /* scaling 1.0, offset 0.0, units mpg  */
	uint8_t Charge_Light; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Oil_Pressure_Light; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x545_DME4_t;

typedef enum {
	CAN_0X545_DME4_CHARGE_LIGHT_OFF = 0,
	CAN_0X545_DME4_CHARGE_LIGHT_ON = 1,
} can_0x545_DME4_Charge_Light_e;

typedef enum {
	CAN_0X545_DME4_OIL_PRESSURE_LIGHT_OFF = 0,
	CAN_0X545_DME4_OIL_PRESSURE_LIGHT_ON = 1,
} can_0x545_DME4_Oil_Pressure_Light_e;

typedef PREPACK struct {
	uint16_t Odometer; /* scaling 10.0, offset 0.0, units none  */
	uint16_t Running_Clock; /* scaling 1.0, offset 0.0, units Seconds  */
	uint8_t Fuel_Level; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x613_Instrument_Cluster_t;

typedef PREPACK struct {
	uint8_t OutsideTemp; /* scaling 1.0, offset 0.0, units deg_c  */
} POSTPACK can_0x615_IKE_t;

typedef PREPACK struct {
	dbcc_time_stamp_t can_0x153_ASC_1_time_stamp_rx;
	dbcc_time_stamp_t can_0x1f0_ABS_1_time_stamp_rx;
	dbcc_time_stamp_t can_0x1f5_Steering_Angle_Sensor_time_stamp_rx;
	dbcc_time_stamp_t can_0x316_DME1_time_stamp_rx;
	dbcc_time_stamp_t can_0x329_DME2_time_stamp_rx;
	dbcc_time_stamp_t can_0x338_DME3_time_stamp_rx;
	dbcc_time_stamp_t can_0x545_DME4_time_stamp_rx;
	dbcc_time_stamp_t can_0x613_Instrument_Cluster_time_stamp_rx;
	dbcc_time_stamp_t can_0x615_IKE_time_stamp_rx;
	unsigned can_0x153_ASC_1_status : 2;
	unsigned can_0x153_ASC_1_tx : 1;
	unsigned can_0x153_ASC_1_rx : 1;
	unsigned can_0x1f0_ABS_1_status : 2;
	unsigned can_0x1f0_ABS_1_tx : 1;
	unsigned can_0x1f0_ABS_1_rx : 1;
	unsigned can_0x1f5_Steering_Angle_Sensor_status : 2;
	unsigned can_0x1f5_Steering_Angle_Sensor_tx : 1;
	unsigned can_0x1f5_Steering_Angle_Sensor_rx : 1;
	unsigned can_0x316_DME1_status : 2;
	unsigned can_0x316_DME1_tx : 1;
	unsigned can_0x316_DME1_rx : 1;
	unsigned can_0x329_DME2_status : 2;
	unsigned can_0x329_DME2_tx : 1;
	unsigned can_0x329_DME2_rx : 1;
	unsigned can_0x338_DME3_status : 2;
	unsigned can_0x338_DME3_tx : 1;
	unsigned can_0x338_DME3_rx : 1;
	unsigned can_0x545_DME4_status : 2;
	unsigned can_0x545_DME4_tx : 1;
	unsigned can_0x545_DME4_rx : 1;
	unsigned can_0x613_Instrument_Cluster_status : 2;
	unsigned can_0x613_Instrument_Cluster_tx : 1;
	unsigned can_0x613_Instrument_Cluster_rx : 1;
	unsigned can_0x615_IKE_status : 2;
	unsigned can_0x615_IKE_tx : 1;
	unsigned can_0x615_IKE_rx : 1;
	can_0x153_ASC_1_t can_0x153_ASC_1;
	can_0x1f0_ABS_1_t can_0x1f0_ABS_1;
	can_0x1f5_Steering_Angle_Sensor_t can_0x1f5_Steering_Angle_Sensor;
	can_0x316_DME1_t can_0x316_DME1;
	can_0x329_DME2_t can_0x329_DME2;
	can_0x338_DME3_t can_0x338_DME3;
	can_0x545_DME4_t can_0x545_DME4;
	can_0x613_Instrument_Cluster_t can_0x613_Instrument_Cluster;
	can_0x615_IKE_t can_0x615_IKE;
} POSTPACK can_obj_e46_h_t;

int unpack_message(can_obj_e46_h_t *o, const unsigned long id, uint64_t data, uint8_t dlc, dbcc_time_stamp_t time_stamp);
int pack_message(can_obj_e46_h_t *o, const unsigned long id, uint64_t *data);
int print_message(const can_obj_e46_h_t *o, const unsigned long id, FILE *output);

int decode_can_0x153_Speed(const can_obj_e46_h_t *o, double *out);
int encode_can_0x153_Speed(can_obj_e46_h_t *o, double in);
int decode_can_0x153_Tyre_Pressure_Set(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x153_Tyre_Pressure_Set(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x153_Brake_Pedal_Pressed(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x153_Brake_Pedal_Pressed(can_obj_e46_h_t *o, uint8_t in);


int decode_can_0x1f0_Wheel_1_Left_Front_Speed(const can_obj_e46_h_t *o, double *out);
int encode_can_0x1f0_Wheel_1_Left_Front_Speed(can_obj_e46_h_t *o, double in);
int decode_can_0x1f0_Wheel_2_Right_Front_Speed(const can_obj_e46_h_t *o, double *out);
int encode_can_0x1f0_Wheel_2_Right_Front_Speed(can_obj_e46_h_t *o, double in);
int decode_can_0x1f0_Wheel_3_Left_Rear_Speed(const can_obj_e46_h_t *o, double *out);
int encode_can_0x1f0_Wheel_3_Left_Rear_Speed(can_obj_e46_h_t *o, double in);
int decode_can_0x1f0_Wheel_4_Right_Rear_Speed(const can_obj_e46_h_t *o, double *out);
int encode_can_0x1f0_Wheel_4_Right_Rear_Speed(can_obj_e46_h_t *o, double in);


int decode_can_0x1f5_Steering_Angle(const can_obj_e46_h_t *o, double *out);
int encode_can_0x1f5_Steering_Angle(can_obj_e46_h_t *o, double in);
int decode_can_0x1f5_Steering_Angle_Velocity(const can_obj_e46_h_t *o, double *out);
int encode_can_0x1f5_Steering_Angle_Velocity(can_obj_e46_h_t *o, double in);
int decode_can_0x1f5_Steering_Angle_Direction(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x1f5_Steering_Angle_Direction(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x1f5_Steering_Angle_Velocity_Direction(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x1f5_Steering_Angle_Velocity_Direction(can_obj_e46_h_t *o, uint8_t in);


int decode_can_0x316_RPM(const can_obj_e46_h_t *o, double *out);
int encode_can_0x316_RPM(can_obj_e46_h_t *o, double in);
int decode_can_0x316_Torque_loss_of_consumers(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x316_Torque_loss_of_consumers(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x316_Torque_after_interventions(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x316_Torque_after_interventions(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x316_Torque_before_interventions(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x316_Torque_before_interventions(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x316_Key(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x316_Key(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x316_Ignition_on_DME_ready(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x316_Ignition_on_DME_ready(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x316_Starter(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x316_Starter(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x316_AC_Clutch(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x316_AC_Clutch(can_obj_e46_h_t *o, uint8_t in);


int decode_can_0x329_Driver_Desired_Torque(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x329_Driver_Desired_Torque(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x329_Throttle_Position(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x329_Throttle_Position(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x329_Engine_Temp(const can_obj_e46_h_t *o, double *out);
int encode_can_0x329_Engine_Temp(can_obj_e46_h_t *o, double in);
int decode_can_0x329_Cycling_Number(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x329_Cycling_Number(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x329_Atmospheric_Pressure(const can_obj_e46_h_t *o, double *out);
int encode_can_0x329_Atmospheric_Pressure(can_obj_e46_h_t *o, double in);
int decode_can_0x329_Brake_Light_Switch_Error(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x329_Brake_Light_Switch_Error(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x329_Clutch_Switch(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x329_Clutch_Switch(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x329_Engine_Running(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x329_Engine_Running(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x329_Brake_Light_Switch(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x329_Brake_Light_Switch(can_obj_e46_h_t *o, uint8_t in);


int decode_can_0x338_Throttle_Position(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x338_Throttle_Position(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x338_Clutch(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x338_Clutch(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x338_Engine_Running(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x338_Engine_Running(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x338_Brake_Switch(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x338_Brake_Switch(can_obj_e46_h_t *o, uint8_t in);


int decode_can_0x545_Fuel_Consumption(const can_obj_e46_h_t *o, uint16_t *out);
int encode_can_0x545_Fuel_Consumption(can_obj_e46_h_t *o, uint16_t in);
int decode_can_0x545_Charge_Light(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x545_Charge_Light(can_obj_e46_h_t *o, uint8_t in);
int decode_can_0x545_Oil_Pressure_Light(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x545_Oil_Pressure_Light(can_obj_e46_h_t *o, uint8_t in);


int decode_can_0x613_Odometer(const can_obj_e46_h_t *o, double *out);
int encode_can_0x613_Odometer(can_obj_e46_h_t *o, double in);
int decode_can_0x613_Running_Clock(const can_obj_e46_h_t *o, uint16_t *out);
int encode_can_0x613_Running_Clock(can_obj_e46_h_t *o, uint16_t in);
int decode_can_0x613_Fuel_Level(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x613_Fuel_Level(can_obj_e46_h_t *o, uint8_t in);


int decode_can_0x615_OutsideTemp(const can_obj_e46_h_t *o, uint8_t *out);
int encode_can_0x615_OutsideTemp(can_obj_e46_h_t *o, uint8_t in);


#ifdef __cplusplus
} 
#endif

#endif
